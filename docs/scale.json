{"markdown":"# Scale\n\nMap abstract data into visual attributes.\n\n## Linear\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json\"\n  );\n  const data = await response.json();\n  return sp.plot({\n    type: \"point\",\n    data,\n    scales: {\n      y: { domain: [60, 85], label: \"Life\" },\n      r: {\n        range: [4, 45],\n        interpolate: (t, a, b) => Math.sqrt(a * a * (1 - t) + b * b * t),\n      },\n    },\n    encodings: {\n      x: \"GDP\",\n      y: \"LifeExpectancy\",\n      r: \"Population\",\n      fill: \"continent\",\n      stroke: \"continent\",\n    },\n    styles: {\n      fillOpacity: 0.8,\n    },\n  });\n})();\n```\n\n## Log\n\n```js | dom\nsp.plot({\n  type: \"point\",\n  data: [\n    { x: 95, y: 95, z: 13.8, name: \"BE\", country: \"Belgium\" },\n    { x: 86.5, y: 102.9, z: 14.7, name: \"DE\", country: \"Germany\" },\n    { x: 80.8, y: 91.5, z: 15.8, name: \"FI\", country: \"Finland\" },\n    { x: 80.4, y: 102.5, z: 12, name: \"NL\", country: \"Netherlands\" },\n    { x: 80.3, y: 86.1, z: 11.8, name: \"SE\", country: \"Sweden\" },\n    { x: 78.4, y: 70.1, z: 16.6, name: \"ES\", country: \"Spain\" },\n    { x: 74.2, y: 68.5, z: 14.5, name: \"FR\", country: \"France\" },\n    { x: 73.5, y: 83.1, z: 10, name: \"NO\", country: \"Norway\" },\n    { x: 71, y: 93.2, z: 24.7, name: \"UK\", country: \"United Kingdom\" },\n    { x: 69.2, y: 57.6, z: 10.4, name: \"IT\", country: \"Italy\" },\n    { x: 68.6, y: 20, z: 16, name: \"RU\", country: \"Russia\" },\n    { x: 65.5, y: 126.4, z: 35.3, name: \"US\", country: \"United States\" },\n    { x: 65.4, y: 50.8, z: 28.5, name: \"HU\", country: \"Hungary\" },\n    { x: 63.4, y: 51.8, z: 15.4, name: \"PT\", country: \"Portugal\" },\n    { x: 64, y: 82.9, z: 31.3, name: \"NZ\", country: \"New Zealand\" },\n  ],\n  paddingTop: 30,\n  scales: {\n    r: { range: [10, 40], type: \"log\" },\n  },\n  encodings: {\n    x: \"x\",\n    y: \"y\",\n    r: \"z\",\n  },\n});\n```\n\n## Time\n\n```js | dom\nsp.plot({\n  type: \"line\",\n  data: [\n    { year: \"1991\", value: 3 },\n    { year: \"1992\", value: 4 },\n    { year: \"1993\", value: 3.5 },\n    { year: \"1994\", value: 5 },\n    { year: \"1995\", value: 4.9 },\n    { year: \"1996\", value: 6 },\n    { year: \"1997\", value: 7 },\n    { year: \"1998\", value: 9 },\n    { year: \"1999\", value: 13 },\n  ],\n  paddingTop: 10,\n  transforms: [\n    (data) =>\n      data.map(({ year, value }) => {\n        const date = new Date();\n        date.setFullYear(year);\n        return { year: date, value };\n      }),\n  ],\n  guides: {\n    x: { formatter: (d) => d.getFullYear(), grid: true },\n    y: { grid: true },\n  },\n  encodings: {\n    x: \"year\",\n    y: \"value\",\n  },\n});\n```\n\n## Ordinal\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/bmw-prod/bd287f2c-3e2b-4d0a-8428-6a85211dce33.json\"\n  );\n  const data = await response.json();\n  return sp.plot({\n    type: \"cell\",\n    data,\n    height: 640,\n    scales: {\n      color: { type: \"ordinal\" },\n    },\n    guides: {\n      color: { width: 30 },\n    },\n    encodings: {\n      x: \"x\",\n      y: \"y\",\n      fill: \"index\",\n      stroke: \"black\",\n    },\n  });\n})();\n```\n\n## Band\n\n```js | dom\nsp.plot({\n  type: \"interval\",\n  data: [\n    { a: \"A\", b: -28 },\n    { a: \"B\", b: 55 },\n    { a: \"C\", b: -33 },\n    { a: \"D\", b: 91 },\n    { a: \"E\", b: 81 },\n    { a: \"F\", b: 53 },\n    { a: \"G\", b: -19 },\n    { a: \"H\", b: 87 },\n    { a: \"I\", b: 52 },\n  ],\n  encodings: {\n    x: \"a\",\n    y: \"b\",\n  },\n});\n```\n\n## Dot\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json\"\n  );\n  const data = await response.json();\n  return sp.plot({\n    height: 120,\n    type: \"point\",\n    data,\n    encodings: {\n      x: \"height\",\n    },\n  });\n})();\n```\n\n## Threshold\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json\"\n  );\n  const data = await response.json();\n  return sp.plot({\n    type: \"cell\",\n    data,\n    transforms: [(data) => data.map((d) => ({ salary: d }))],\n    width: 900,\n    height: 320,\n    scales: {\n      color: {\n        type: \"threshold\",\n        domain: [10000, 100000],\n        range: [\"#eee\", \"pink\", \"red\"],\n      },\n    },\n    guides: {\n      color: {\n        width: 80,\n        formatter: (d) => `${(d / 1000) | 0} k`,\n      },\n    },\n    encodings: {\n      y: (_, i) => (i % 5) + 1,\n      x: (_, i) => ((i / 5) | 0) + 1,\n      fill: \"salary\",\n      stroke: \"black\",\n    },\n  });\n})();\n```\n\n## Quantile\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json\"\n  );\n  const data = await response.json();\n  return sp.plot({\n    type: \"cell\",\n    data,\n    transforms: [(data) => data.map((d) => ({ salary: d }))],\n    width: 900,\n    height: 320,\n    scales: {\n      color: { type: \"quantile\", range: [\"#eee\", \"pink\", \"red\"] },\n    },\n    guides: {\n      color: {\n        width: 250,\n        formatter: (d) => `${(d / 1000) | 0} k`,\n      },\n    },\n    encodings: {\n      y: (_, i) => (i % 5) + 1,\n      x: (_, i) => ((i / 5) | 0) + 1,\n      fill: \"salary\",\n      stroke: \"black\",\n    },\n  });\n})();\n```\n\n## Quantize\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json\"\n  );\n  const data = await response.json();\n  return sp.plot({\n    type: \"cell\",\n    data,\n    transforms: [(data) => data.map((d) => ({ salary: d }))],\n    width: 900,\n    height: 320,\n    scales: {\n      color: { type: \"quantize\", range: [\"#eee\", \"pink\", \"red\"] },\n    },\n    guides: {\n      color: {\n        width: 120,\n        formatter: (d) => `${(d / 1000) | 0} k`,\n      },\n    },\n    encodings: {\n      y: (_, i) => (i % 5) + 1,\n      x: (_, i) => ((i / 5) | 0) + 1,\n      fill: \"salary\",\n      stroke: \"black\",\n    },\n  });\n})();\n```\n"}