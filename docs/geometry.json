{"markdown":"# Geometry\n\nVisual representation for data.\n\n## Point\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json\"\n  );\n  const data = await response.json();\n  return sp.plot({\n    type: \"point\",\n    data,\n    encodings: {\n      x: \"height\",\n      y: \"weight\",\n      stroke: \"gender\",\n    },\n  });\n})();\n```\n\n## Interval\n\n```js | dom\nsp.plot({\n  type: \"interval\",\n  data: [\n    { genre: \"Sports\", sold: 275 },\n    { genre: \"Strategy\", sold: 115 },\n    { genre: \"Action\", sold: 120 },\n    { genre: \"Shooter\", sold: 350 },\n    { genre: \"Other\", sold: 150 },\n  ],\n  encodings: {\n    x: \"genre\",\n    y: \"sold\",\n    fill: \"genre\",\n  },\n});\n```\n\n```js | dom\nsp.plot({\n  type: \"interval\",\n  data: [\n    { city: \"London\", month: \"Jan.\", rainfall: 18.9 },\n    { city: \"London\", month: \"Feb.\", rainfall: 28.8 },\n    { city: \"London\", month: \"Mar.\", rainfall: 39.3 },\n    { city: \"London\", month: \"Apr.\", rainfall: 81.4 },\n    { city: \"London\", month: \"May\", rainfall: 47 },\n    { city: \"London\", month: \"Jun.\", rainfall: 20.3 },\n    { city: \"London\", month: \"Jul.\", rainfall: 24 },\n    { city: \"London\", month: \"Aug.\", rainfall: 35.6 },\n    { city: \"Berlin\", month: \"Jan.\", rainfall: 12.4 },\n    { city: \"Berlin\", month: \"Feb.\", rainfall: 23.2 },\n    { city: \"Berlin\", month: \"Mar.\", rainfall: 34.5 },\n    { city: \"Berlin\", month: \"Apr.\", rainfall: 99.7 },\n    { city: \"Berlin\", month: \"May\", rainfall: 52.6 },\n    { city: \"Berlin\", month: \"Jun.\", rainfall: 35.5 },\n    { city: \"Berlin\", month: \"Jul.\", rainfall: 37.4 },\n    { city: \"Berlin\", month: \"Aug.\", rainfall: 42.4 },\n  ],\n  paddingLeft: 60,\n  encodings: {\n    x: \"month\",\n    y: \"rainfall\",\n    fill: \"city\",\n    z: \"city\",\n  },\n});\n```\n\n```js | dom\nsp.plot({\n  type: \"interval\",\n  data: [\n    { month: \"Jan.\", profit: 387264, start: 0, end: 387264 },\n    { month: \"Feb.\", profit: 772096, start: 387264, end: 1159360 },\n    { month: \"Mar.\", profit: 638075, start: 1159360, end: 1797435 },\n    { month: \"Apr.\", profit: -211386, start: 1797435, end: 1586049 },\n    { month: \"May\", profit: -138135, start: 1586049, end: 1447914 },\n    { month: \"Jun\", profit: -267238, start: 1447914, end: 1180676 },\n    { month: \"Jul.\", profit: 431406, start: 1180676, end: 1612082 },\n    { month: \"Aug.\", profit: 363018, start: 1612082, end: 1975100 },\n    { month: \"Sep.\", profit: -224638, start: 1975100, end: 1750462 },\n    { month: \"Oct.\", profit: -299867, start: 1750462, end: 1450595 },\n    { month: \"Nov.\", profit: 607365, start: 1450595, end: 2057960 },\n    { month: \"Dec.\", profit: 1106986, start: 2057960, end: 3164946 },\n    { month: \"Total\", start: 0, end: 3164946 },\n  ],\n  guides: {\n    y: { formatter: (d) => ((d / 1000) | 0) + \"k\" },\n  },\n  encodings: {\n    x: \"month\",\n    y: \"start\",\n    y1: \"end\",\n    fill: (d) =>\n      d.month === \"Total\" ? \"Total\" : d.profit > 0 ? \"Increase\" : \"Decrease\",\n  },\n});\n```\n\n## Cell\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json\"\n  );\n  const data = await response.json();\n  return sp.plot({\n    type: \"cell\",\n    data,\n    transforms: [(data) => data.map((d) => ({ salary: d }))],\n    width: 900,\n    height: 320,\n    scales: { color: { range: [\"#ffffff\", \"#ff0000\"] } },\n    guides: {\n      color: { width: 200, formatter: (d) => `${(d / 1000) | 0} k` },\n    },\n    encodings: {\n      y: (_, i) => (i % 5) + 1,\n      x: (_, i) => ((i / 5) | 0) + 1,\n      fill: \"salary\",\n      stroke: \"black\",\n    },\n  });\n})();\n```\n\n## Rect\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json\"\n  );\n  const data = await response.json();\n  return sp.plot({\n    type: \"rect\",\n    data,\n    scales: {\n      y: { label: \"count\" },\n    },\n    paddingTop: 30,\n    statistics: [{ type: \"binX\", channel: \"y\" }],\n    encodings: {\n      x: \"height\",\n    },\n  });\n})();\n```\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/bmw-prod/9ae12ce8-8590-4bc4-b906-68c593cc460d.json\"\n  );\n  const data = await response.json();\n  return sp.plot({\n    type: \"rect\",\n    data,\n    guides: {\n      x: { display: false },\n      y: { display: false },\n      color: { display: false },\n    },\n    paddingTop: 10,\n    paddingLeft: 10,\n    paddingBottom: 10,\n    paddingRight: 10,\n    encodings: {\n      x: \"x\",\n      y: \"y\",\n      x1: \"x1\",\n      y1: \"y1\",\n      fill: \"name\",\n      stroke: \"black\",\n    },\n  });\n})();\n```\n\n## Line\n\n```js | dom\nsp.plot({\n  type: \"line\",\n  data: [\n    { year: \"1991\", value: 15468 },\n    { year: \"1992\", value: 16100 },\n    { year: \"1993\", value: 15900 },\n    { year: \"1994\", value: 17409 },\n    { year: \"1995\", value: 17000 },\n    { year: \"1996\", value: 31056 },\n    { year: \"1997\", value: 31982 },\n    { year: \"1998\", value: 32040 },\n    { year: \"1999\", value: 33233 },\n  ],\n  paddingTop: 10,\n  encodings: {\n    x: \"year\",\n    y: \"value\",\n  },\n});\n```\n\n```js | dom\nsp.plot({\n  type: \"line\",\n  data: [\n    { month: \"Jan\", city: \"Tokyo\", temperature: 7 },\n    { month: \"Jan\", city: \"London\", temperature: 3.9 },\n    { month: \"Feb\", city: \"Tokyo\", temperature: 6.9 },\n    { month: \"Feb\", city: \"London\", temperature: 4.2 },\n    { month: \"Mar\", city: \"Tokyo\", temperature: 9.5 },\n    { month: \"Mar\", city: \"London\", temperature: 5.7 },\n    { month: \"Apr\", city: \"Tokyo\", temperature: 14.5 },\n    { month: \"Apr\", city: \"London\", temperature: 8.5 },\n    { month: \"May\", city: \"Tokyo\", temperature: 18.4 },\n    { month: \"May\", city: \"London\", temperature: 11.9 },\n    { month: \"Jun\", city: \"Tokyo\", temperature: 21.5 },\n    { month: \"Jun\", city: \"London\", temperature: 15.2 },\n    { month: \"Jul\", city: \"Tokyo\", temperature: 25.2 },\n    { month: \"Jul\", city: \"London\", temperature: 17 },\n    { month: \"Aug\", city: \"Tokyo\", temperature: 26.5 },\n    { month: \"Aug\", city: \"London\", temperature: 16.6 },\n    { month: \"Sep\", city: \"Tokyo\", temperature: 23.3 },\n    { month: \"Sep\", city: \"London\", temperature: 14.2 },\n    { month: \"Oct\", city: \"Tokyo\", temperature: 18.3 },\n    { month: \"Oct\", city: \"London\", temperature: 10.3 },\n    { month: \"Nov\", city: \"Tokyo\", temperature: 13.9 },\n    { month: \"Nov\", city: \"London\", temperature: 6.6 },\n    { month: \"Dec\", city: \"Tokyo\", temperature: 9.6 },\n    { month: \"Dec\", city: \"London\", temperature: 4.8 },\n  ],\n  scales: { y: { label: \"temp\" } },\n  encodings: {\n    x: \"month\",\n    y: \"temperature\",\n    stroke: \"city\",\n  },\n});\n```\n\n## Area\n\n```js | dom\nsp.plot({\n  type: \"area\",\n  paddingTop: 10,\n  data: [\n    { year: \"1991\", value: 15468 },\n    { year: \"1992\", value: 16100 },\n    { year: \"1993\", value: 15900 },\n    { year: \"1994\", value: 17409 },\n    { year: \"1995\", value: 17000 },\n    { year: \"1996\", value: 31056 },\n    { year: \"1997\", value: 31982 },\n    { year: \"1998\", value: 32040 },\n    { year: \"1999\", value: 33233 },\n  ],\n  encodings: {\n    x: \"year\",\n    y: \"value\",\n  },\n});\n```\n\n```js | dom\nsp.plot({\n  type: \"area\",\n  data: [\n    { month: \"Jan\", city: \"Tokyo\", temperature: 7 },\n    { month: \"Jan\", city: \"London\", temperature: 3.9 },\n    { month: \"Feb\", city: \"Tokyo\", temperature: 6.9 },\n    { month: \"Feb\", city: \"London\", temperature: 4.2 },\n    { month: \"Mar\", city: \"Tokyo\", temperature: 9.5 },\n    { month: \"Mar\", city: \"London\", temperature: 5.7 },\n    { month: \"Apr\", city: \"Tokyo\", temperature: 14.5 },\n    { month: \"Apr\", city: \"London\", temperature: 8.5 },\n    { month: \"May\", city: \"Tokyo\", temperature: 18.4 },\n    { month: \"May\", city: \"London\", temperature: 11.9 },\n    { month: \"Jun\", city: \"Tokyo\", temperature: 21.5 },\n    { month: \"Jun\", city: \"London\", temperature: 15.2 },\n    { month: \"Jul\", city: \"Tokyo\", temperature: 25.2 },\n    { month: \"Jul\", city: \"London\", temperature: 17 },\n    { month: \"Aug\", city: \"Tokyo\", temperature: 26.5 },\n    { month: \"Aug\", city: \"London\", temperature: 16.6 },\n    { month: \"Sep\", city: \"Tokyo\", temperature: 23.3 },\n    { month: \"Sep\", city: \"London\", temperature: 14.2 },\n    { month: \"Oct\", city: \"Tokyo\", temperature: 18.3 },\n    { month: \"Oct\", city: \"London\", temperature: 10.3 },\n    { month: \"Nov\", city: \"Tokyo\", temperature: 13.9 },\n    { month: \"Nov\", city: \"London\", temperature: 6.6 },\n    { month: \"Dec\", city: \"Tokyo\", temperature: 9.6 },\n    { month: \"Dec\", city: \"London\", temperature: 4.8 },\n  ],\n  scales: { y: { label: \"temp\" } },\n  encodings: {\n    x: \"month\",\n    y: \"temperature\",\n    fill: \"city\",\n  },\n  styles: {\n    fillOpacity: \"0.3\",\n  },\n});\n```\n\n## Link\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/bmw-prod/94ff125b-cec5-449f-9471-7d1cd4c92636.json\"\n  );\n  const data = await response.json();\n  return sp.plot({\n    type: \"link\",\n    data,\n    scales: {\n      x: { type: \"log\", label: \"Population\" },\n      y: { label: \"Inequality\" },\n    },\n    paddingLeft: 60,\n    paddingTop: 30,\n    guides: {\n      x: { formatter: (d) => `${(d / 1000) | 0} k` },\n    },\n    encodings: {\n      x: \"POP_1980\",\n      y: \"R90_10_1980\",\n      x1: \"POP_2015\",\n      y1: \"R90_10_2015\",\n      stroke: \"black\",\n    },\n  });\n})();\n```\n\n## Text\n\n```js | dom\n(async () => {\n  const response = await fetch(\n    \"https://gw.alipayobjects.com/os/bmw-prod/49cfe4c4-192c-40c5-ad2c-133342c8b8c5.json\"\n  );\n  const data = await response.json();\n  const keys = [\"id\", \"name\", \"nationality\", \"sex\"];\n  return sp.plot({\n    data,\n    type: \"text\",\n    transforms: [\n      (data) => data.filter((_, i) => i < 10),\n      (data) => {\n        const ths = [\"index\", ...keys].map((key) => ({\n          index: -1,\n          key,\n          value: key,\n          header: true,\n        }));\n        const tds = data.flatMap((d, i) => {\n          const cell = keys.map((key) => ({ index: i, key, value: d[key] }));\n          return [...cell, { index: i, key: \"index\", value: i }];\n        });\n        return [...ths, ...tds].reverse();\n      },\n    ],\n    scales: {\n      y: { type: \"band\" },\n      x: { domain: [\"index\", ...keys] },\n      fontWeight: { type: \"identity\" },\n    },\n    paddingTop: 10,\n    paddingLeft: 10,\n    paddingBottom: 10,\n    guides: {\n      x: { display: false },\n      y: { display: false },\n    },\n    encodings: {\n      y: \"index\",\n      x: \"key\",\n      text: (d) => (d.header ? d.value.toUpperCase() : d.value),\n      fontWeight: (d) => (d.header ? \"bold\" : \"normal\"),\n    },\n    styles: {\n      textAnchor: \"middle\",\n      dy: \"-0.5em\",\n    },\n  });\n})();\n```\n\n## Path\n\n```js | dom\n(() => {\n  const svg = sp.plot({\n    type: \"path\",\n    data: [\n      {\n        d: \"M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9 23.5 23.2 38.1 55.4 38.1 91v112.5c0.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z\",\n      },\n    ],\n    width: 512,\n    height: 512,\n    encodings: {\n      d: \"d\",\n    },\n  });\n  svg.setAttribute(\"viewBox\", [0, 0, 1024, 1024]);\n  return svg;\n})();\n```\n"}